#
# Whether to commit each revision automatically. User interaction is only 
# required, if the commit fails.
#
autoCommit: true;

# Merge intra-branch moves and copies as intra-branch moves and copies (instead of as cross-branch copies and deletes).
semanticMoves: true

# By default SVN merge info is considered when selecting change sets to merge. This can be turned off to gain performance, when no duplicate merges can occur (e.g. it's the first merge to/from a certain branch).
ignoreMergeInfo: false

# Before merge revisions to merge are checked for their conflict potential. A revision has a conflict potential, if it touches a resource that has been touched by another revision before, but this other revision is not yet ported to the target branch. This extra check can be turned off to gain performance.
skipDependencies: false

# To filter irrelevant dependency warnings, commits from tickets with certain milestones can be excluded. The value is a regular expression matching the ticket milestone to exclude.
#dependencyReport.excludeTicketMilestone = ^V_1.0|^V_0.5

# To filter irrelevant dependency warnings, potential conflicts on certain files can be excluded. The value is a regular expression matching the file path.
#dependencyReport.excludePath = /WEB-INF/conf/|.*\.jsp

# the first revision to patch
startRevision: 1

# The revision in which to resolve the source branch 
# (e.g. relevant if the source branch does no longer existin in the HEAD revsion).
pegRevision: 0

# the revision where the merge ends, or 0 for HEAD.
endRevision: 0

# Whether to automatically detect the modules to merge (from the source branch 
# at pegRevision and the target workspace).
detectCommonModules: true

# Modules for which changes must be patched. If not given, all modules on the source branch are used.
# modules: 
			
# Whether to revert changes instead of applying them.
revert: false

#
# Whether preview commit messages should be generated.
#
preview: false

#
# Whether Hotfixes are ported. If true, Hotfixes on the source branch are ported by removing the "Hotfix on xxx: " part of the message.  
#
#portHotfixes: false

#
# Would be cool, if a custom commit message pattern could be used. This is not implemented yet.
#
#portMessage:\
#Ticket #{ticketNumber}: Ported to {targetBranch} from {sourceBranch}:{apiChange? API change:} {reverted?Reverted }[{mergedChangeset}]:{originalMessage}
#previewMessage:\
#Ticket #{ticketNumber}: Preview on {targetBranch}:{apiChange? API change:} {reverted?Reverted }[{mergedChangeset}]:{originalMessage}


# the branch to take changes from 
sourceBranch: /trunk
# the branch to commit changes to 
targetBranch: /branches/xx

# the local workspace root in which merging occurs
workspaceRoot: 

# URL to access trac and SVN
tracURL: http://tl/trac/login/xmlrpc
svnURL: http://tl/svn/top-logic

# If the value of noCommit is 'true' then the changes are applied but not committed
#noCommit:true

# ',' list of numbers of tickets to port additional
#additionalTickets:

# Maps ticket numbers before commit. Syntax: #<orig-ticket>=#<ticket-to-commit>,...
#ticketMapping:#9=7,#13=#42

#
# Defines arbitrary revisions to be ported. The form of the property is a ',' separated list of revisions.
#
#additionalRevisions:

#
# defines the milestone for which the port is done. If a Ticket contains implementedIn "milestone:<targetMileStone>" 
# then this ticket is expected to be ported before and will be ignored.  
#
targetMilestone: 

#
# Defines additional milestones which tickets must have to be ported. The form is a ',' separated list of milestones 
#
#milestones:

# ',' list of numbers of tickets to ignore during port.
#ignoreTickets:

#
# Defines a list of revisions to ignore during merge
#
#ignoreRevisions:

# Name of a resource mapping file.
#
# The referenced file is a properties-like file with definition of the form
#
#   # Comment
#   regexp1 = replacement1
#   regexp2 = replacement2
#
# Each regexp is matched against the beginning of each merged path. If it matches, it is 
# replaced with the associated replacement string. Mappings are applied in the order given
# in the mappings file. 
#
#resourceMapping: path/to/mapping.properties

# Regular expression that matches a branch at the beginning of a SVN changed log entry path.
branchPattern: /branches/[^/]+/[^/]+/|/tags/[^/]+/[^/]+/

# Regular expression that matches a special branch "trunk" at the beginning of a SVN changed log entry path.
branchPattern: /branches/[^/]+/[^/]+/|/tags/[^/]+/[^/]+/
